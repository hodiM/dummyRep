<!DOCTYPE html>
<!--[if lt IE 7]><html class="ng-csp ie ie6 lte9 lte8 lte7" data-placeholder-focus="false" lang="en"><![endif]-->
<!--[if IE 7]><html class="ng-csp ie ie7 lte9 lte8 lte7" data-placeholder-focus="false" lang="en" ><![endif]-->
<!--[if IE 8]><html class="ng-csp ie ie8 lte9 lte8" data-placeholder-focus="false" lang="en" ><![endif]-->
<!--[if IE 9]><html class="ng-csp ie ie9 lte9" data-placeholder-focus="false" lang="en" ><![endif]-->
<!--[if gt IE 9]><html class="ng-csp ie" data-placeholder-focus="false" lang="en" ><![endif]-->
<!--[if !IE]><!-->
<html class="ng-csp" data-placeholder-focus="false" lang="en" >
    <!--<![endif]-->
    <head data-requesttoken="OaAbF46UBjGSheEUyHkbVEUBTjmwd.">
        <title>
            DigiLocker        </title>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta http-equiv="Pragma" content="no-cache">
        <meta http-equiv="Cache-Control" content="no-store">
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
        <meta name="viewport" content="width=device-width, minimum-scale=1.0, maximum-scale=1.0">
        <meta name="apple-itunes-app" content="app-id=1320618078">
        <link rel="shortcut icon" type="image/png" href="https://img1.digitallocker.gov.in/core/img/favicon.png" />
        <link rel="apple-touch-icon-precomposed" href="https://img1.digitallocker.gov.in/core/img/favicon-touch.png" />

        <link rel="stylesheet" type="text/css" href="https://ccs1.digitallocker.gov.in/assets/css/bootstrap.min.css"/>
        <link rel="stylesheet" href="https://ccs1.digitallocker.gov.in/assets/css/landing_v3.css"/>
        <link rel="stylesheet" href="https://ccs1.digitallocker.gov.in/assets/css/font-awesome.css"/>
        <style> 
            body {
                background-color: #f5f5f5;}
            main{ 
                background-color: #f5f5f5;
                margin-top: -20px !important; }
            .section-header {
                display: block;
                font-size: 4.4rem;
                margin-bottom: 20px;
                border-bottom: 1px solid rgba(103, 61, 255, 0.3);}
            a {
                font-weight: 300;}
            .blue{
                color: #00090e;
                font-weight: 400;}
            .panel-about {
                background-color: rgb(255, 255, 255);
                margin-top: 10px;
                border-radius: 0;
                display: inline-block;
                position: relative;
                width: 100%;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.4);
                border-radius: 3px;
                background: #fff;
                min-height: 50px;
                margin-bottom: 0px;
                color: #000;
                padding: 25px 20px;}
            .credit-active{
                padding: 10px;}
            .imgabout {
                margin:0px; 
                padding-top: 30px; 
                text-align:center;}
            .imgcredits {
                float:left; 
                margin: 0px 30px 0px 0px; 
                width: 67px;}
            .top-massage{
                margin-bottom: -6px;
                margin-top: 14px;
                border-radius: 4px;}
            .signup_box{
                padding-left: 28px;
                padding-right: 80px;}
            .MainCntFAQ {
                padding-top: 40px;
                padding-bottom: 30px;}
            .signup_msg_box{
                padding-left: 80px;
                padding-right: 28px;}
            .bgfooter {
                background-color: #000;}
            .nav-tabs > li.active > a, .nav-tabs > li.active > a:hover, .nav-tabs > li.active > a:focus {
                color: #555555;
                background-color: #ffffff;
                border: 1px solid #dddddd;
                border-bottom-color: transparent;
                cursor: default;font-weight: bolder;}
            .thank-you{
                font-weight:bold;
                font-size:18px;
                margin-top:30px;
                margin-bottom:5px;
            }
            .btn-success {        
                width: 100%;
            }
            .center-img_log { 
                display: block;
                margin-left: auto;
                margin-right: auto;
                margin-top: 10px;
                margin-bottom: 10px; }
            .top_header_text{ 
                color: #fff !important; 
                font-size: 13px; 
                text-decoration: none !important;}
            .top_header{
                background-color: #303030;
                display: block;
                border-bottom: 1px solid #ebebeb; 
                height: 30px;
                font-size: 1.2em;} 
            .headerhght {
                height: 100px;}
            .bgfooter {
                background-color: #000;
                font-size: 13px;}
            .footerlable {
                color: #dedcdc;
                text-align: right;
                line-height: 15px;}
            .ftrlists {
                display: inline-flex;
                color: #fff;
                list-style: none;
                margin-left: -40px;}
            .foot_margin{
                padding: 18px 0px 0px 0px;}

            @media screen and (max-width: 480px){ 
                .headerhght {
                    background: #673ffd none repeat scroll 0 0 !important;
                    color: rgba(255, 255, 255, 1);
                    font: 16px/130% "ABeeZee",Helvetica,sans-serif;
                    text-overflow: ellipsis;
                    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
                    padding: 18px;height: 65px;}
                .top-massage{ 
                    margin-bottom: -6px; 
                    margin-top: 0px; 
                    border-radius: 0px; 
                    background-color: #673ffd;}
                .signup_box{
                    padding-left: 0px;padding-right: 0px;}
                .MainCntFAQ{
                    padding-top: 40px;}
                .section-header{
                    display: block;
                    font-size: 2.4rem;
                    margin-bottom: 10px;
                    border-bottom: 1px solid rgba(103, 61, 255, 0.3);}

                .btn-success {
                    color: #ffffff;
                    background-color: #673ffd;
                    border-color: #673ffd;
                    width: 100%;
                    height: 36px;}    
            }
        </style>
    </head>
    <body>
        <noscript>
        <div id="nojavascript">
            <div>This application requires JavaScript for correct operation. Please <a href="http://enable-javascript.com/" target="_blank">enable JavaScript</a> and reload the page.</div>
        </div>
        </noscript>
           <div class="no-padding headerhght">
    <nav class="navbar navbar-default navbar-fixed-top hdrshadow">
      <div class="container-fluid no-padding hdrbgclr">      
        <div class="col-md-12 col-sm-12 hidden-xs headerhght">
        <div class="row top_header hidden-xs">
           <div class="container">             
            <div class="col-md-12 col-sm-12">
            
            <div class="col-md-6 col-sm-6">
                  <ul style="display:flex; list-style: none;">
                	<li style="margin-left: -60px;"><a href="https://india.gov.in/" target="_blank" style="color: #5f5d5d;font-size: 14px; text-decoration:none;"><img src="https://js1.digitallocker.gov.in/assets/img/flag_1.png" style="height: 14px;" title="Government of India" alt="Government of India"></a></li>
                    <li style="border-right: 1px solid #ccc;margin-right: 6px;margin-left: 7px;margin-top: 9px;margin-bottom: 1px;"></li>
                    <li><a class="top_header_text" target="_blank" href="https://india.gov.in/" title="Government of India" alt="Government of India">Government of India</a> </li>
             </ul>
            
			</div>
           <div class="col-md-6 col-sm-6 hidden-xs righthalf">
        		<ul class="nav navbar-nav navbar-right tabcntr btnsintab nav-right" style="display:flex">
              		<li class="lirghtup"  style="padding-top: 8px">
                    	<a class="top_header_text" href="#main_section" title="Skip to main content" alt="Skip to main content">Skip to main content</a>
                    </li>
                    <li style="border-right: 1px solid #ccc;margin-right: 10px;margin-top: 11px;margin-bottom: 5px;"></li>
              		<li class="lirghtup" style="margin-top: 8px; cursor: pointer; cursor: hand; "> 
                      <a class="top_header_text"  id="btn-decrease">A-</a>
                       
                    </li>
                    <li class="lirghtup" style="margin-top: 8px; cursor: pointer; cursor: hand; "> 
                      <a class="top_header_text" id="btn-orig">A</a>
                    </li>
                    <li class="lirghtup" style="margin-top: 8px; cursor: pointer; cursor: hand; " >
                      <a class="top_header_text"  id="btn-increase">A+</a>
                    </li>
                    <li style="border-right: 1px solid #ccc;margin-right: 10px;margin-top: 11px;margin-bottom: 5px;"></li>    
                     
              			<select class="css-select top_header_text" title="Language" name="language" id="language" style="font-size:13px; background-color: #303030; color: #fff;">
							 <option value="english" >English</option>
                			              			</select>			
            				
               </ul>
            </div>
           
            </div>
            </div>            
        </div>
        <div class="row">
         <div class="container">
        <div class="col-md-6 col-sm-6">
            <ul style="display: flex; list-style: none;">
            <li style="padding-right: 7px; margin-left: -52px;">
            <img class="nationalemblemindia" alt="DigiLocker" src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAACoAAAA9AQMAAADh3mk7AAAAA1BMVEX///+nxBvIAAAAAXRSTlMAQObYZgAAAA5JREFUeNpjYBgFQwQAAAGrAAH9nHIOAAAAAElFTkSuQmCC">
            </li>
            <li style="border-right: 1px solid #ccc; margin-right: 10px; margin-top: 8px; margin-bottom: 6px;"></li>
            <li style="padding-top: 7px"><a href="/"><img class="logodg" alt="DigiLocker" src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAMIAAAAxAQMAAACyKeTFAAAAA1BMVEX///+nxBvIAAAAAXRSTlMAQObYZgAAABJJREFUeNpjYBgFo2AUjIKRBgAE+gAB9AKIcgAAAABJRU5ErkJggg==" /></a>
            </li>
            </ul>
        </div>
        <div class="col-md-6 col-sm-6 hidden-xs righthalf">
            <ul class="nav navbar-nav navbar-right tabcntr btnsintab nav-right"
            style="display: flex">
            <li class="lirghtup" style="padding-top: 8px"><img
                class="digital-india-logo" alt="Digital India" src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAGYAAAA1AQMAAACJCwx4AAAAA1BMVEX///+nxBvIAAAAAXRSTlMAQObYZgAAAA9JREFUeNpjYBgFo2C4AwAC5gABAK7QwQAAAABJRU5ErkJggg==">
            </li>
            <li
                style="border-right: 1px solid #ccc; margin-right: 10px; margin-top: 15px; margin-bottom: 6px;"></li>
            <li class="lirghtup" style="margin-top: 20px;"><a
                href="/index.php"><button class="btn btn-success btn-sm">Sign In</button></a>
            </li>
            <li class="lirghtup " style="margin-top: 20px;"><a
                href="/public/websignup"><button class="btn btn-primary btn-sm">Sign Up</button></a>
            </li>
                <li
                style="border-right: 1px solid #ccc; margin-right: 10px; margin-top: 15px; margin-bottom: 6px;"></li>
            <li class="lirghtup " style="margin-top: 20px;"><a
                href="https://devpartners.digitallocker.gov.in/" target="_blank"><button class="btn btn-warning btn-sm">Partners</button></a>
            </li>
            </ul>
        </div>
            </div>
        
            </div>
			</div>
        </div>
        <div class="hidden-md hidden-sm hidden-lg headerhght">
        <a onclick="goBack()" class="fa fa-arrow-left" style="color: #fff; margin-right: 20px; margin-left: 10px;"></a>  
            <a href="/" style="color: #fff; text-decoration: none;"> DigiLocker</a>
        </div>
    </div>
        
        
        </div>
    </nav>
</div>

<script
src="https://js1.digitallocker.gov.in/core/vendor/jquery/jquery.min.js"></script>

<script>

    $(document).ready(function () {
        $('#language').change(function () {
            var txt = $('#language').val();
            $.post("/public/api/languageapi/language", {languageValue: txt}, function (result) {
                if (result.status)
                {
                    location.reload()

                }

                //$("span").html(result);
            });

            //alert(language);
        });

    });

</script>
<script>
function goBack() {
  window.history.go(-2);
}
</script>

        <input type="hidden" id="image_cdn" value="https://img1.digitallocker.gov.in"/>
        <main id="main_section" role="main">
            <style type="text/css">
.pagehide {
    display: none;
}
</style>
<div class="container-fluid no-padding loginpage" style=" min-height: 400px;">
    <div class="section">
        <div class="center-block">
            <div class="baseline">
                <div class="row">
                    <div class="col-lg-12 col-md-12 cal-sm-12 cal-xs-12"
                        style="padding-top: 50px; text-align: center;">
                        <img style="width: 185px; margin-bottom: 20px;"
                            src="/core/img/logodg.png">
                        
                        
                        
                                
                        <p class="nolststyl"
                            style="font-family: 'Open Sans', Frutiger, Calibri, 'Myriad Pro', Myriad, sans-serif; list-style: none; color: #000; font-size: 35px; margin-top: 30px;">
                                Document Details is Empty                        </p>
                        <p
                            style="font-family: 'Open Sans', Frutiger, Calibri, 'Myriad Pro', Myriad, sans-serif; font-size: 15px; line-height: 25px;">
                                                     </p>
                                             </div>
                </div>
            </div>
        </div>
    </div>
</div>
 
        </main>
        <div style="clear:both"></div>
<div class="bgfooter">
    <div class="container hidden-xs">
       <div class="row foot_margin">
        <div class="col-md-8 col-sm-8">        
        <ul class="ftrlists">
                    <li>&nbsp;<a class="whitetext" href="/about.php">About</a> | </li>
                    <li>&nbsp;<a class="whitetext" href="/public/dashboard">Statistics</a> | </li>
                    <li>&nbsp;<a class="whitetext" href="/faq.php">FAQs</a> | </li>
                    <li>&nbsp;<a class="whitetext" href="/resource-center.php">Resources</a> | </li>
                    <li>&nbsp;<a class="whitetext" href="/credits.php">Credits</a> | </li>
                    <li>&nbsp;<a class="whitetext" href="https://blog.digitallocker.gov.in/" target="_blank">Blog</a> | </li> 
		    <li>&nbsp;<a class="whitetext" href="resource/departmental_circulars.php">Circulars</a> | </li>
            <li>&nbsp;<a class="whitetext" href="https://devpartners.digitallocker.gov.in/" target="_blank">Partners</a> | </li>
                    <li>&nbsp;<a class="whitetext" href="/privacypolicy.php">Privacy Policy</a> | </li>
            <li>&nbsp;<a class="whitetext" href="/jobs.php">Careers</a> | </li>
                    <li>&nbsp;<a class="whitetext" href="/contactus.php">Contact</a></li>
        </ul>
        <div class="footersec">
            
                    <a href="https://www.facebook.com/OfficialDigiLocker" target="_blank" class="links hvr-grow" ><img class="facebook" alt="facebook" src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAACgAAAAoAQMAAAC2MCouAAAAA1BMVEX///+nxBvIAAAAAXRSTlMAQObYZgAAAAxJREFUeNpjYBhZAAAA8AABOGlaUQAAAABJRU5ErkJggg=="></a> &nbsp; 
                    &nbsp;<a href="https://twitter.com/digilocker_ind" target="_blank" class="links hvr-grow"><img class="twitter" alt="twitter" src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAACgAAAAoAQMAAAC2MCouAAAAA1BMVEX///+nxBvIAAAAAXRSTlMAQObYZgAAAAxJREFUeNpjYBhZAAAA8AABOGlaUQAAAABJRU5ErkJggg=="></a> &nbsp; 
                    &nbsp;<a href="https://plus.google.com/111850842069869647595?hl=en" target="_blank" class="links hvr-grow"><img class="googleplus" alt="plus.google" src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAACgAAAAoAQMAAAC2MCouAAAAA1BMVEX///+nxBvIAAAAAXRSTlMAQObYZgAAAAxJREFUeNpjYBhZAAAA8AABOGlaUQAAAABJRU5ErkJggg=="></a> &nbsp; 
                    &nbsp;<a href="https://www.youtube.com/channel/UCHVbXM4OexDUKyGBtdvmfmg" target="_blank" class="links hvr-grow"><img class="youtube" alt="youtube" src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAACgAAAAoAQMAAAC2MCouAAAAA1BMVEX///+nxBvIAAAAAXRSTlMAQObYZgAAAAxJREFUeNpjYBhZAAAA8AABOGlaUQAAAABJRU5ErkJggg=="> </a>&nbsp; 
                    &nbsp;&nbsp;&nbsp;<a href="https://play.google.com/store/apps/details?id=com.digilocker.android" target="_blank" class="links hvr-grow" ><img style=" box-shadow: 0 2px 5px rgba(0, 0, 0, 0.4);"src="https://img1.digitallocker.gov.in/assets/img/playstore_2.png">  </a> &nbsp;&nbsp; 
                    &nbsp;&nbsp;&nbsp;<a href="https://itunes.apple.com/in/app/digilocker/id1320618078" target="_blank" class="links hvr-grow" ><img style=" box-shadow: 0 2px 5px rgba(0, 0, 0, 0.4);"src="https://img1.digitallocker.gov.in/assets/img/ios_1.png">  </a> &nbsp;  
        </div>
        <div class="footersec">  
            &nbsp;<a href="https://trustsealinfo.websecurity.norton.com/splash?form_file=fdf/splash.fdf&dn=digilocker.gov.in&lang=en" 
                 target="popup" 
                 onclick="window.open('https://trustsealinfo.websecurity.norton.com/splash?form_file=fdf/splash.fdf&dn=digilocker.gov.in&lang=en', 'popup', 'width=570,height=500');
                                     return false;">
            <img class="getseal" alt="getseal" src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAHMAAABRAQMAAADb6QuYAAAAA1BMVEX///+nxBvIAAAAAXRSTlMAQObYZgAAABNJREFUeNpjYBgFo2AUjIJRAAIABRAAAWH8LIUAAAAASUVORK5CYII=" width="80px" height="56px"></a> &nbsp; 
            &nbsp;<img class="img-256sll" alt="img-256sll" src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAIcAAABBAQMAAADBmCXgAAAAA1BMVEX///+nxBvIAAAAAXRSTlMAQObYZgAAABJJREFUeNpjYBgFo2AUjILBAgAEkgABCoK5SwAAAABJRU5ErkJggg==" width="90px" height="43px" style="margin-top: -13px;">&nbsp; 
        </div>
        </div>
        <div class="col-md-4 col-sm-4">
           
            <div class="footerlable">
                <img class="negd-logo" alt="negd-logo" src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAHUAAAAtAQMAAACqF7ZlAAAAA1BMVEX///+nxBvIAAAAAXRSTlMAQObYZgAAAA9JREFUeNpjYBgFo2D4AAAC0AAB4tdONAAAAABJRU5ErkJggg=="><br>
        National eGovernance Division <br>
        Ministry of Electronics & Information Technology (MeitY) <br>
        Government of India<br>
        Copyright @ 2019, Version 1.5            </div>
            </div>
        </div>
    </div>
</div>

<div class="hidden-lg hidden-md hidden-sm col-xs-12 bgfooter">
    <div class="container">
    <div class="footerlable ftrgap" style="font-size: 11px; text-align: center;">        
        A Digital India Initiative <br>
        Government of India, Copyright @ 2019<br>
        <div>                                       
        <img class="getseal" alt="getseal" src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAHMAAABRAQMAAADb6QuYAAAAA1BMVEX///+nxBvIAAAAAXRSTlMAQObYZgAAABNJREFUeNpjYBgFo2AUjIJRAAIABRAAAWH8LIUAAAAASUVORK5CYII=" style="margin-top: 0px;width: 12%;">&nbsp; &nbsp;
        <img class="img-256sll" alt="img-256sll" src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAIcAAABBAQMAAADBmCXgAAAAA1BMVEX///+nxBvIAAAAAXRSTlMAQObYZgAAABJJREFUeNpjYBgFo2AUjILBAgAEkgABCoK5SwAAAABJRU5ErkJggg==" style="margin-top: -5px;width: 14%;">
        </div>
    </div>
    </div>
</div>  
<script>

var $affectedElements = $("p, h4, .btn, h2, .panel, ol, .MainCntFAQ, h1, h3, h4"); // Can be extended, ex. $("div, p, span.someClass")


// Storing the original size in a data attribute so size can be reset
$affectedElements.each( function(){
  var $this = $(this);
  $this.data("orig-size", $this.css("font-size") );
});

$("#btn-increase").click(function(){
  changeFontSize(1);
})

$("#btn-decrease").click(function(){
  changeFontSize(-1);
})

$("#btn-orig").click(function(){
  $affectedElements.each( function(){
        var $this = $(this);
        $this.css( "font-size" , $this.data("orig-size") );
   });
})

function changeFontSize(direction){
    $affectedElements.each( function(){
        var $this = $(this);
        $this.css( "font-size" , parseInt($this.css("font-size"))+direction );
    });
}
</script>
<script>
    (function (i, s, o, g, r, a, m) {
        i['GoogleAnalyticsObject'] = r;
        i[r] = i[r] || function () {
            (i[r].q = i[r].q || []).push(arguments)
        }, i[r].l = 1 * new Date();
        a = s.createElement(o),
                m = s.getElementsByTagName(o)[0];
        a.async = 1;
        a.src = g;
        m.parentNode.insertBefore(a, m)
    })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

    ga('create', 'UA-63185340-1', 'auto');
    ga('send', 'pageview');

</script>

        <script src="https://js1.digitallocker.gov.in/core/js/aes.js"></script>
        <script src="https://js1.digitallocker.gov.in/core/js/aes-json-format.js"></script>
        <script type="text/javascript">
            function isNumberKey(evt) {
                var charCode = (evt.which) ? evt.which : event.keyCode;
                if (charCode > 31 && (charCode < 48 || charCode > 57))
                    return false;
                return true;
            }
        </script>
                        <script type="text/javascript" src="/index.php/core/js/oc.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>
                            <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/vendor/jquery/jquery.min.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/vendor/jquery/jquery-migrate.min.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/vendor/jquery-ui/ui/jquery-ui.custom.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/vendor/underscore/underscore.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/vendor/moment/min/moment-with-locales.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/vendor/handlebars/handlebars.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/js/placeholders.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/js/jquery-tipsy.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/js/compatibility.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/js/jquery.ocdialog.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/js/oc-dialogs.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/js/js.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/js/l10n.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/js/octemplate.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/js/eventsource.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/js/config.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/search/js/search.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/js/oc-requesttoken.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/js/apps.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/vendor/snapjs/dist/latest/snap.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/js/placeholder.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/vendor/blueimp-md5/js/md5.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/js/jquery.avatar.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/js/avatar.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/core/js/share.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                                <script type="text/javascript" src="https://js1.digitallocker.gov.in/apps/user_doubleauth/js/utils_v2.js?v=9b83180581afd8a961bf0d1e1d1bd0f4"></script>

                
                <script type="text/javascript">
            function setCookie(cname, cvalue, exdays) {
                var d = new Date();
                d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
                var expires = "expires=" + d.toUTCString();
                document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
            }
            

            $("#user").on('change', function () {
                var user = $("#user").val();
                $.post("/index.php/apps/dashboard/ajax/loadDashboardData.php", {user: user}).done();
            });
            $("#submit").on('click', function () {
                if ($(this).hasClass('disabledbutton')) {
                    $("#submit").attr("disabled", true);
                    $("#submit").attr("readonly", "readonly");
                    return false;
                } else {
                    if ($('#password').val() !== '' && $('#user').val() !== '') {
                        do {
                            var encrypted = CryptoJS.AES.encrypt(JSON.stringify($('#password').val()), $('#user').val(), {format: CryptoJSAesJson}).toString();
                            var n = encrypted.indexOf('+');
                        } while (n > 0);
                        $('#password').val(encrypted);
                    }

                }
            });
        </script> 
        <script type="text/javascript">

            $(function () {
                $(".fblogin_button").on('click', function () {
                    FB.login(function (response) {
                        if (response.authResponse) {
                        }
                    });

                });
                $('.msgclose').on('click', function () {
                    $('.container').css({'display': 'block'});
                    $('#connect').css({'display': 'none'});
                    $('#not_linked').css({'display': 'none'});

                })
            })

            $(document).ready(function ()
            {
                
                function disableBack() { window.history.forward(1); }

                window.onload = disableBack();
                window.onpageshow = function(evt) { if (evt.persisted) disableBack()}
                
                
                if($('#double_auth_enable').val() === 'N'){
                    // enable submit button           
                $('#submit').removeClass('disabledbutton');
                $('#submit').removeAttr("readonly");
                $('#user').removeAttr("readonly");
                $('#password').removeAttr("readonly");
                    
                }
                /*no back button*/
               window.location.hash="no-back";
window.location.hash="No-back";//again because google chrome don't insert first hash into history
window.onhashchange=function(){window.location.hash="no-back";};

    function disableBack() { window.history.forward(-1); }
         window.onload = disableBack();
         window.onpageshow = function(evt) { if (evt.persisted) disableBack() ;};


                
                //Disable cut copy paste
                $('body').bind('cut copy paste', function (e) {
                    e.preventDefault();
                });
                //Disable mouse right click
                $("body").on("contextmenu", function (e) {
                    return false;
                });
            });
        </script>

    </body>
</html>
